import numpy as np
import matplotlib.pyplot as plt

# Define sigmoid activation function and its derivative
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

# Define the neural network class
class NeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size, learning_rate):
        # Initialize network architecture
        self.input_size = input_size
        self.hidden_size = hidden_size
        self.output_size = output_size

        # Initialize weights and biases randomly
        self.weights_input_hidden = np.random.uniform(size=(input_size, hidden_size))
        self.bias_hidden = np.random.uniform(size=(1, hidden_size))
        self.weights_hidden_output = np.random.uniform(size=(hidden_size, output_size))
        self.bias_output = np.random.uniform(size=(1, output_size))

        # Set learning rate
        self.learning_rate = learning_rate

    def forward_propagation(self, X):
        # Forward propagation through the network
        self.hidden_layer_input = np.dot(X, self.weights_input_hidden) + self.bias_hidden
        self.hidden_layer_output = sigmoid(self.hidden_layer_input)
        self.output_layer_input = np.dot(self.hidden_layer_output, self.weights_hidden_output) + self.bias_output
        self.predicted_output = sigmoid(self.output_layer_input)
        return self.predicted_output

    def backward_propagation(self, X, y):
        # Backward propagation through the network
        error = y - self.predicted_output
        d_predicted_output = error * sigmoid_derivative(self.predicted_output)
        error_hidden_layer = d_predicted_output.dot(self.weights_hidden_output.T)
        d_hidden_layer = error_hidden_layer * sigmoid_derivative(self.hidden_layer_output)

        # Update weights and biases
        self.weights_hidden_output += self.hidden_layer_output.T.dot(d_predicted_output) * self.learning_rate
        self.bias_output += np.sum(d_predicted_output, axis=0, keepdims=True) * self.learning_rate
        self.weights_input_hidden += X.T.dot(d_hidden_layer) * self.learning_rate
        self.bias_hidden += np.sum(d_hidden_layer, axis=0, keepdims=True) * self.learning_rate

    def train(self, X, y, epochs):
        # Train the network for a specified number of epochs
        self.loss_history = []  # To store the loss at each epoch
        for epoch in range(epochs):
            # Forward propagation
            self.forward_propagation(X)
            # Compute mean squared error loss
            loss = np.mean((y - self.predicted_output) ** 2)
            self.loss_history.append(loss)
            # Backward propagation
            self.backward_propagation(X, y)

    def plot_loss(self):
        plt.plot(range(len(self.loss_history)), self.loss_history)
        plt.xlabel('Epoch')
        plt.ylabel('Loss')
        plt.title('Training Loss over Epochs')
        plt.show()

# Synthetic dataset
X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
y = np.array([[0], [1], [1], [0]])

# Define network architecture and hyperparameters
input_size = 2
hidden_size = 5
output_size = 1
learning_rate = 0.1
epochs = 1000

# Create and train the neural network
nn = NeuralNetwork(input_size, hidden_size, output_size, learning_rate)
nn.train(X, y, epochs)

# Plot the training loss over epochs
nn.plot_loss()
