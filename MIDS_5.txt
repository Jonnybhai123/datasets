import numpy as np

# Define the points
points = np.array([[0.1, 0.6],
                   [0.15, 0.71],
                   [0.08, 0.9],
                   [0.16, 0.85],
                   [0.2, 0.3],
                   [0.25, 0.5],
                   [0.24, 0.1],
                   [0.3, 0.2]])

# Define initial centroids
centroid1 = np.array([0.1, 0.6])  # P1
centroid2 = np.array([0.3, 0.2])  # P8

# Define a function to calculate the Euclidean distance between two points
def euclidean_distance(point1, point2):
    return np.sqrt(np.sum((point1 - point2) ** 2))

# Perform k-means clustering
max_iterations = 100
for iteration in range(max_iterations):
    # Step 1: Assign each point to the nearest centroid
    cluster1_points = []
    cluster2_points = []
    for point in points:
        distance_to_centroid1 = euclidean_distance(point, centroid1)
        distance_to_centroid2 = euclidean_distance(point, centroid2)
        if distance_to_centroid1 < distance_to_centroid2:
            cluster1_points.append(point)
        else:
            cluster2_points.append(point)
    
    # Step 2: Update the centroids based on the mean of the points in each cluster
    new_centroid1 = np.mean(cluster1_points, axis=0)
    new_centroid2 = np.mean(cluster2_points, axis=0)
    
    # Step 3: Check for convergence
    if np.array_equal(new_centroid1, centroid1) and np.array_equal(new_centroid2, centroid2):
        print("Convergence reached after", iteration + 1, "iterations.")
        break
    
    # Update centroids
    centroid1 = new_centroid1
    centroid2 = new_centroid2

# Print final centroids and cluster assignments
print("Final centroid 1 (C1):", centroid1)
print("Final centroid 2 (C2):", centroid2)
print("Cluster 1 (C1) points:", cluster1_points)
print("Cluster 2 (C2) points:", cluster2_points)